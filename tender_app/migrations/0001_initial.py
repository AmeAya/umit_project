# Generated by Django 4.2.5 on 2023-09-09 07:02

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_subscribed', models.BooleanField(default=False)),
                ('expired_date', models.DateField(auto_now_add=True)),
                ('type', models.CharField(choices=[('company', 'company'), ('worker', 'worker')], max_length=55)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Bundle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('duration', models.IntegerField()),
                ('price', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('bin', models.CharField(max_length=12, validators=[django.core.validators.MinLengthValidator(12)])),
                ('address', models.TextField()),
                ('face', models.TextField()),
                ('face_phone', models.CharField(max_length=12, validators=[django.core.validators.MinLengthValidator(11)])),
                ('requisites', models.FileField(upload_to='docs/companies/requisites/')),
                ('license', models.FileField(upload_to='docs/companies/license/')),
                ('gos_reg', models.FileField(upload_to='docs/companies/gos_reg/')),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('rating', models.FloatField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tender_app.company')),
            ],
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('file', models.FileField(upload_to='', verbose_name='docs/replies/')),
                ('date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Subsection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tender_app.section')),
            ],
        ),
        migrations.CreateModel(
            name='TenderDoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc', models.FileField(upload_to='docs/tenders/')),
                ('type', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='WorkerDoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc', models.FileField(upload_to='docs/workers/')),
                ('type', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('bin', models.CharField(max_length=12, validators=[django.core.validators.MinLengthValidator(12)])),
                ('description', models.TextField()),
                ('director', models.TextField()),
                ('phone', models.CharField(max_length=12, validators=[django.core.validators.MinLengthValidator(11)])),
                ('rating', models.FloatField()),
                ('cities', models.ManyToManyField(to='tender_app.city')),
                ('docs', models.ManyToManyField(to='tender_app.workerdoc')),
                ('feedbacks', models.ManyToManyField(to='tender_app.feedback')),
                ('types_of_work', models.ManyToManyField(to='tender_app.subsection')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tender',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('expire_date', models.DateTimeField(blank=True, null=True)),
                ('budget', models.FloatField()),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tender_app.company')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tender_app.city')),
                ('docs', models.ManyToManyField(to='tender_app.tenderdoc')),
                ('replies', models.ManyToManyField(to='tender_app.reply')),
                ('types_of_work', models.ManyToManyField(to='tender_app.subsection')),
            ],
        ),
        migrations.AddField(
            model_name='reply',
            name='author',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tender_app.worker'),
        ),
        migrations.AddField(
            model_name='company',
            name='favourites',
            field=models.ManyToManyField(to='tender_app.worker'),
        ),
        migrations.AddField(
            model_name='company',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
